doctype html
html
  include modules/head/head.jade
  body
    .titles.titles--fixed
      a.titles__btn
      ul.titles__list
        li.titles__item.titles__item--active
          a.titles__link Самое важное в SASS
        li.titles__item
          a.titles__link Нюансы использования цепочек одинаковых классов
        li.titles__item
          a.titles__link Учимся любить БЭМ
        li.titles__item
          a.titles__link Новая возможность языка в ES2016: оператор возведения в степень (**)
        li.titles__item
          a.titles__link NaN это не «не число»
    .preloader
      .preloader__container
        .preloader__text 0
        include ../icons/forest.svg
    include modules/menu.jade
    .titles-click-area
    .inner-wrapper
      include modules/header/blog-header.jade
      section.blog
        .blog-inner
          .titles.titles--static
            .titles__wrapper
              .titles__left
                ul.titles__list
                  li.titles__item.titles__item--active
                    a.titles__link Самое важное в SASS
                  li.titles__item
                    a.titles__link Нюансы использования цепочек одинаковых классов
                  li.titles__item
                    a.titles__link Учимся любить БЭМ
                  li.titles__item
                    a.titles__link Новая возможность языка в ES2016: оператор возведения в степень (**)
                  li.titles__item
                    a.titles__link NaN это не «не число»
              .titles__right
          section.articles
            article.article
              h1.article__header Самое важное в SASS
              date.article__date 22 ноября 2016
              .article__text
                p.article__paragraph.
                  Таким образом начало повседневной работы по формированию позиции позволяет выполнять важные задания по разработке направлений прогрессивного развития. Разнообразный и богатый опыт новая модель организационной деятельности играет важную роль в формировании новых предложений. Товарищи! новая модель организационной деятельности играет важную роль в формировании систем массового участия.
                p.article__paragraph.
                  Не следует, однако забывать, что укрепление и развитие структуры обеспечивает широкому кругу (специалистов) участие в формировании систем массового участия. Идейные соображения высшего порядка, а также рамки и место обучения кадров обеспечивает широкому кругу (специалистов) участие в формировании позиций, занимаемых участниками в отношении поставленных задач. Товарищи! постоянный количественный рост и сфера нашей активности способствует подготовки и реализации модели развития. С другой стороны рамки и место обучения кадров влечет за собой процесс внедрения и модернизации системы обучения кадров, соответствует насущным потребностям.
                code.article__code.code
                  ul.code__lines
                    li.code__line 1
                    li.code__line 2
                    li.code__line 3
                    li.code__line 4
                    li.code__line 5
                  .code__text
                    .code__string.
                      <span class="code__comment-text">//присвоить</span>
                    .code__string.
                      $(document).data(<span class="code__quote-text">'prop'</span>, { anything: <span class="code__quote-text">"любой объект"</span> })
                    .code__string <br>
                    .code__string.
                      <span class="code__comment-text">//прочитать</span>
                    .code__string.
                      alert($(document).data(<span class="code__quote-text">'prop'</span>).anything) <span class="code__comment-text">// любой объект</span>
            article.article
              h1.article__header Нюансы использования цепочек одинаковых классов
              date.article__date 01 сентября 2015
              .article__text
                p.article__paragraph.
                  Это короткая публикация — переписка по емейлу с моим клиентом, который задал мне вопрос о цепочках одинаковых классов (например .foo.foo {}).
                p.article__paragraph.
                  Вопрос в был, в основном, о количестве «ссылок» в цепочке, и их связи с тем, сколько раз конкретный класс использован в HTML.
                p.article__paragraph.
                  Например, соответствует ли селектор .foo.foo {} элементу с классами class="foo foo", а .foo.foo.foo {} — элементу с class="foo foo foo", и так далее?
                p.article__paragraph.
                  Клиент: Привет! Надеюсь, у тебя все хорошо. Я хотел бы задать тебе один вопрос про CSS: я был уверен, что текст элементов отобразится тремя разными цветами, но этого не произошло (во всех элементах текст синиий), и я не могу нагуглить никакого объяснения этому:
                p.article__paragraph
                  pre.
                    .column { color: red; }
                    .column.column { color: green; }
                    .column.column.column { color: blue; }
                p.article__paragraph.
                  Почему так происходит?
                p.article__paragraph.
                  Я: Привет! Все хорошо, спасибо. Работаю в солнечном Лондоне с классными клиентами. Как у тебя дела? Как остальные? Хмм. Это забавно! Удивительно, что всё это один и тот же селектор.
                p.article__paragraph.
                  .color {} спрашивает «Есть ли у элемента класс color?»
                p.article__paragraph.
                  .color.color {} не спрашивает «Есть ли два класса color?», он просто задаёт тот же вопрос дважды. В действительности, он ничего не «подсчитывает» в HTML. Это тонкое, но важно различие, как ты уже заметил!
                p.article__paragraph.
                  Если вам нужно стилизовать элемент, основываясь на «подсчёте» количества классов в вашей разметке, вы можете переписать код вот так:
                pre.
                  [class="column"] { color: red; }
                  [class="column column"] { color: green; }
                  [class="column column column"] { color: blue; }
            article.article
              h1.article__header Учимся любить БЭМ
              date.article__date 22 августа 2015
              .article__text
                p.article__paragraph.
                  Должен признаться: когда я впервые услышал о БЭМ, я подумал, что идея как-то не очень. Зачем так усложнять именование в CSS? Можно же называть классы проще: .form-group или .accordion. Какой смысл заморачиваться классами вроде .accordion__child и .accordion__child--highlighted?
                p.article__paragraph.
                  В январе я работал над одним проектом с моим коллегой Йелле (Jelle), который в своем коде использует БЭМ-синтаксис. Сначала я сомневался в этом подходе, но, так как он был ведущим HTML/CSS разработчиком проекта, ему и карты в руки.
                p.article__paragraph.
                  Со временем я узнал БЭМ получше и убедился, что у него есть свои достоинства: в основном он полезен для больших приложений с огромным количеством компонентов.
                p.article__paragraph.
                  Представьте себе интерфейс панели управления со множеством виджетов и множеством страниц с разными состояниями. Представьте продукт, который должен оставаться стабильным, хотя над его CSS-компонентами работает много разных людей. Вот тут-то БЭМ и обретает смысл.
                p.article__paragraph Логика БЭМ (Блок — Элемент — Модификатор):
                  ul
                    li Есть блок, например, .my-element
                    li Есть элемент, например, .my-element__sub-element (два подчёркивания подряд обозначают дочерний элемент)
                    li И, может быть, модификатор, например, .my-element__sub-element—-highlighted (двойной дефис означает модификатор состояния).
            article.article
              h1.article__header Новая возможность языка в ES2016: оператор возведения в степень (**)
              date.article__date 29 декабря 2016
              .article__text
                p.article__paragraph.
                  Оператор возведения в степень (**) — это дополнение для ECMAScript, предложеннное Риком Валдроном (Rick Waldron). Оно находится на четвертой стадии процесса формирования релизов, то есть полностью готово, и является частью спецификации ECMAScript 2016.
                p.article__paragraph.
                  ** — это инфиксный оператор для возведения в степень:
                p.article__paragraph.
                  x ** y он вернёт тот же результат, что и: Math.pow(x, y)
                p.article__paragraph.
                  Например:
                code.article__code.code
                  ul.code__lines
                    li.code__line 1
                    li.code__line 2
                    li.code__line 3
                    li.code__line 4
                    li.code__line 5
                  .code__text
                    .code__string.
                      let squared = 3 ** 2; <span class="code__comment-text">// 9</span>
                    .code__string.
                      <br>
                    .code__string <br>
                    .code__string.
                      let num = 3;
                    .code__string.
                      num **= 2;
                    .code__string.
                      console.log(num); <span class="code__comment-text">// 9</span>
            article.article
              h1.article__header NaN это не «не число»
              date.article__date 09 марта 2016
              .article__text
                p.article__paragraph.
                  При разработке программного обеспечения очень важно быть точным в использовании терминов: корректное использование необходимо для эффективной коммуникации между разработчиками. Очень важно быть на одной волне.
                p.article__paragraph.
                  Один из терминов, который очень часто используют неправильно,— это NaN.
                p.article__paragraph.
                  Его корни лежат в стандарте IEEE754, он определяет NaN как как специальное значение (на самом деле, как мы увидим далее, множество значений), которое используется если результат вычисления не может или не должен быть представлен как конкретное число, или попросту неизвестен. Например: asin(2) или 0/0. Это приводит нас к следующему открытию: NaN — на самом деле значение числового типа! Просто это специальное число, которое представлено по-особенному.
                p.article__paragraph.
                  Итак, NaN, согласно стандарту IEEE754, не какое-то значение не числового типа, но в действительности — число. А это значит, что не совсем корректно говорить, что строка "foo" является NaN, ибо на самом деле это не так.
                p.article__paragraph.
                  Всё становится ещё более интересным если мы посмотрим, как значение NaN представлено внутри. У чисел с плавающей запятой двойной точности (64 бит), которые используются для представления значений типа Number в JavaScript и некоторых других языках, специальный диапазон значений, у которых экспонента равна значению 0x7FF (11 бит), выделен для представления числа NaN. А это значит, что оставшиеся 53 бита могут принимать произвольные значения (исключая значения с мантиссой равной нулю, ибо эти значения зарезервированы для двух других специальных значений:  +Infinity и -Infinity). Итого, для чисел с плавающей запятой двойной точности мы можем сконструировать значение NaN 9007199254740990 (2^53 - 3) разными способами. Это довольно-таки много.
                p.article__paragraph.
                  Подводя итог: если вы используете термин NaN как синоним, обозначающий «что угодно, что не является числом» (строка, значение null, объект, и т.д.), пожалуйста, не делайте этого больше. А если нет — пожалуйста, распространите это знание дальше и помогите другим людям быть такими же точными, как и вы.
      include modules/inner-footer.jade